/*
 *     Generated by class-dump 3.2 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2009 by Steve Nygard.
 */

#import "LibraryInterface-Protocol.h"

@interface Library <LibraryInterface>
{
}

+ (id)sharedInstance;
+ (void)commitMessage:(id)arg1 immediately:(BOOL)arg2;
+ (id)backingStoreJournalDirectory;
+ (id)backingStoreJournalPath;
+ (BOOL)removeBackingStoreUpdateJournal;
+ (BOOL)updateBackingStoreUpdateJournal;
+ (void)_mergeRestoreMessageLibraryIDsToUpdate:(id)arg1;
+ (void)restoreBackingStoreUpdateJournalIfNeeded;
+ (void)flagsChangedForMessages:(id)arg1 flags:(id)arg2 oldFlagsByMessage:(id)arg3 newFlagsByMessage:(id)arg4;
+ (void)flagsChangedForMessages:(id)arg1 flags:(id)arg2 oldFlagsByMessage:(id)arg3 newFlagsByMessage:(id)arg4 updateUnreadCount:(BOOL)arg5;
+ (void)_setCommitTimer:(id)arg1;
+ (void)_setUpdateEmlxTimer:(id)arg1;
+ (void)scheduleCommit;
+ (void)unScheduleCommit;
+ (void)scheduleMessageFileUpdate;
+ (void)unScheduleMessageFileUpdate;
+ (void)synchronouslyUpdateMessageFiles;
+ (void)commitSynchronously;
+ (void)commitMessagesInBackground;
+ (void)updateMessageFilesInBackground;
+ (void)waitForCommitsToFinish;
+ (void)setFlags:(unsigned int)arg1 mask:(unsigned int)arg2 forMessage:(id)arg3;
+ (void)_setFlags:(id)arg1 mask:(id)arg2 forMessage:(id)arg3;
+ (void)_flushChangedFlags;
+ (void)setFlagsForMessages:(id)arg1 mask:(unsigned int)arg2;
+ (void)setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
+ (void)setFlagsAndColorForMessages:(id)arg1;
+ (void)updateEncodingForMessage:(id)arg1;
+ (void)updateSize:(id)arg1 forMessage:(id)arg2;
+ (BOOL)initializeDatabase:(struct sqlite3 *)arg1;
+ (void)initialize;
+ (BOOL)setupLibrary;
+ (void)_mailboxWillBeInvalidated:(id)arg1;
+ (void)_mailboxWasRenamed:(id)arg1;
+ (void)_mailAccountsDidChange:(id)arg1;
+ (id)plistDataForMessage:(id)arg1 subject:(id)arg2 sender:(id)arg3 to:(id)arg4 dateSent:(id)arg5 remoteID:(id)arg6 originalMailbox:(id)arg7 flags:(unsigned long long)arg8 mergeWithDictionary:(id)arg9;
+ (BOOL)_writeEmlxFile:(id)arg1 forMessage:(id)arg2 withEmlxData:(id)arg3 error:(id *)arg4;
+ (BOOL)_writeEmlxFile:(id)arg1 forMessage:(id)arg2 withBodyData:(id)arg3 plistData:(id)arg4 error:(id *)arg5;
+ (void)touchDirectoryForMailbox:(id)arg1;
+ (BOOL)isRemoteStoreAccount:(id)arg1;
+ (BOOL)isLocalAccount:(id)arg1;
+ (BOOL)isLibraryMessage:(id)arg1;
+ (BOOL)canUseEmlxFileWhenCopyingMessage:(id)arg1 fromAccount:(id)arg2 toAccount:(id)arg3;
+ (void)cleanupTablesReferencingMessageID:(long long)arg1 inDatabase:(struct sqlite3 *)arg2;
+ (id)insertOrUpdateMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 remoteIDs:(id)arg6 newDocumentIDs:(id)arg7 setFlags:(unsigned long long)arg8 clearFlags:(unsigned long long)arg9 messageFlagsForMessages:(id)arg10 copyFiles:(BOOL)arg11 progressDelegate:(id)arg12 updateRowIDs:(id)arg13 error:(id *)arg14;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 remoteIDs:(id)arg6 setFlags:(unsigned long long)arg7 clearFlags:(unsigned long long)arg8 messageFlagsForMessages:(id)arg9 copyFiles:(BOOL)arg10 error:(id *)arg11;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 error:(id *)arg6;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 oldMessagesByNewMessage:(id)arg4 error:(id *)arg5;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 progressDelegate:(id)arg3 error:(id *)arg4;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 error:(id *)arg3;
+ (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(unsigned long long)arg5 clearFlags:(unsigned long long)arg6 messageFlagsForMessages:(id)arg7 createNewCacheFiles:(BOOL)arg8 error:(id *)arg9;
+ (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(unsigned long long)arg5 clearFlags:(unsigned long long)arg6 createNewCacheFiles:(BOOL)arg7 error:(id *)arg8;
+ (void)setAttachmentNames:(id)arg1 forMessage:(id)arg2;
+ (void)setThreadPriority:(int)arg1;
+ (int)threadPriority;
+ (long long)updateSequenceNumber;
+ (long long)accessSequenceNumber;
+ (void)invalidateActiveMailboxesCaches;
+ (void)_disableActiveMailboxesCacheForTesting;
+ (id)_updatedActiveMailboxes:(id)arg1;
+ (void)_updateActiveMailboxes;
+ (BOOL)_isActiveMailboxID:(long long)arg1;
+ (id)_updatedActiveMailboxesClause:(id)arg1;
+ (void)_updateActiveMailboxesClause;
+ (id)_updatedActiveNoteMailboxesClause:(id)arg1;
+ (void)_updateActiveNoteMailboxesClause;
+ (id)activeNoteMailboxesClause;
+ (void)sendMessagesMatchingQuery:(const char *)arg1 to:(id)arg2 options:(unsigned int)arg3;
+ (id)messagesMatchingQuery:(const char *)arg1 options:(unsigned int)arg2;
+ (id)messagesWhere:(id)arg1 sortedBy:(id)arg2 options:(unsigned int)arg3;
+ (void)sendMessagesForMailbox:(id)arg1 where:(id)arg2 sortedBy:(id)arg3 ascending:(BOOL)arg4 to:(id)arg5 options:(unsigned int)arg6;
+ (id)messagesForMailbox:(id)arg1 where:(id)arg2 sortedBy:(id)arg3 ascending:(BOOL)arg4 options:(unsigned int)arg5;
+ (id)messagesForMailbox:(id)arg1 olderThanNumberOfDays:(long long)arg2;
+ (id)unreadMessagesForMailbox:(id)arg1;
+ (void)gatherCountsForMailbox:(id)arg1 totalCount:(unsigned long long *)arg2 unreadCount:(unsigned long long *)arg3 deletedCount:(unsigned long long *)arg4 totalSize:(unsigned long long *)arg5;
+ (unsigned long long)unreadCountForMessageType:(BOOL)arg1;
+ (unsigned long long)unreadCountForMailbox:(id)arg1;
+ (unsigned long long)deletedCountForMailbox:(id)arg1;
+ (id)messageWithRemoteID:(id)arg1 inRemoteMailbox:(id)arg2 options:(unsigned int)arg3;
+ (long long)libraryIDForRemoteID:(id)arg1 inRemoteMailbox:(id)arg2;
+ (unsigned int)maximumRemoteIDForMailbox:(id)arg1;
+ (id)getDetailsForMessagesWithRemoteIDStrings:(id)arg1 fromMailbox:(id)arg2;
+ (id)getDetailsForMessagesWithRemoteIDs:(id)arg1 fromMailbox:(id)arg2;
+ (id)getDetailsForMessagesWithQuery:(char *)arg1 contiguous:(BOOL)arg2 firstRemoteID:(unsigned long long)arg3 lastRemoteID:(unsigned long long)arg4 fromMailbox:(id)arg5;
+ (void)setStoresForMessages:(id)arg1;
+ (void)setStoreForMessage:(id)arg1 knownStores:(id)arg2;
+ (id)messageWithMessageID:(id)arg1;
+ (id)messagesWithMessageIDHeader:(id)arg1;
+ (id)messageWithLibraryID:(long long)arg1 options:(unsigned int)arg2;
+ (id)messageWithLibraryID:(long long)arg1;
+ (id)messagesInSameThreadAsMessages:(id)arg1 seenMessageIDs:(id)arg2 options:(unsigned int)arg3 db:(struct sqlite3 *)arg4 uniquer:(id)arg5;
+ (id)messagesInSameThreadAsMessages:(id)arg1 options:(unsigned int)arg2;
+ (id)firstReplyToMessage:(id)arg1;
+ (BOOL)messageHasRelatedNonJunkMessages:(id)arg1;
+ (unsigned long long)unsignedCountForQuery:(id)arg1 monitor:(id)arg2;
+ (BOOL)boolForQuery:(id)arg1;
+ (id)referencesForLibraryID:(long long)arg1;
+ (BOOL)messageHasToDos:(id)arg1;
+ (id)copyMailboxURLToRowIDMap;
+ (void)mailboxesDidChange;
+ (id)urlForMailboxID:(long long)arg1;
+ (id)mailboxUidForMessage:(id)arg1;
+ (id)remoteStoreForMessage:(id)arg1;
+ (id)accountForMessage:(id)arg1;
+ (id)mailboxNameForMessage:(id)arg1;
+ (BOOL)_loadSecondaryMetadataForMessage:(id)arg1 fromDB:(struct sqlite3 *)arg2;
+ (BOOL)loadSecondaryMetadataForMessage:(id)arg1;
+ (void)reloadMessage:(id)arg1;
+ (void)updateFileForMessage:(id)arg1;
+ (BOOL)shouldCancel;
+ (void)messagesWereCompacted:(id)arg1 mailboxes:(id)arg2;
+ (void)removeMessages:(id)arg1;
+ (void)removeMessages:(id)arg1 cleanUpAfter:(BOOL)arg2;
+ (void)compactMailbox:(id)arg1;
+ (BOOL)renameMailboxes:(id)arg1 to:(id)arg2;
+ (void)deleteMailboxes:(id)arg1;
+ (void)deleteMailboxes:(id)arg1 forRebuild:(BOOL)arg2;
+ (id)messagesWithMessageID:(id)arg1 inMailbox:(id)arg2;
+ (id)lastMessageWithMessageID:(id)arg1 inMailbox:(id)arg2;
+ (void)addFeed:(id)arg1 forMailbox:(id)arg2;
+ (void)deleteFeedForMailbox:(id)arg1;
+ (id)feedURLStringForMailbox:(id)arg1;
+ (id)mailboxURLStringForFeed:(id)arg1;
+ (id)unflaggedArticlesCreatedBeforeDate:(id)arg1;
+ (id)articlesByRemoteIDForRemoteIDs:(id)arg1;
+ (id)noteWithDocumentID:(id)arg1;
+ (void)setLastReceivedArticlesDate:(id)arg1;
+ (id)lastReceivedArticlesDate;
+ (void)removeRemoteIDsFromRSSArticlesInMessages:(id)arg1;
+ (BOOL)_EWSFolderExistsForMailbox:(id)arg1 errorString:(id)arg2;
+ (void)_addEWSProperty:(char *)arg1 value:(id)arg2 forMailbox:(id)arg3 errorString:(id)arg4;
+ (id)_EWSProperty:(char *)arg1 forMailbox:(id)arg2 errorString:(id)arg3;
+ (void)setEWSFolderId:(id)arg1 forMailbox:(id)arg2;
+ (id)EWSFolderIdForMailbox:(id)arg1;
+ (id)EWSFolderIdsByURLForMailboxes:(id)arg1;
+ (void)setEWSSyncState:(id)arg1 forMailbox:(id)arg2;
+ (id)EWSSyncStateForMailbox:(id)arg1;
+ (void)updateEWSOfflineIdsToRealIds:(id)arg1;
+ (id)dataPathForMessage:(id)arg1 type:(int)arg2;
+ (id)dataPathForMessage:(id)arg1;
+ (id)attachmentsDirectoryForLibraryID:(long long)arg1 mailboxID:(long long)arg2;
+ (id)realDataPathForMessage:(id)arg1;
+ (id)messageWithDataPath:(id)arg1;
+ (id)existingDataPathForMessage:(id)arg1;
+ (void)appendData:(id)arg1 forMessage:(id)arg2 part:(id)arg3;
+ (void)setData:(id)arg1 forMessage:(id)arg2 isPartial:(BOOL)arg3;
+ (id)bodyDataAtPath:(id)arg1 headerData:(id *)arg2;
+ (id)headerDataForMessage:(id)arg1;
+ (id)bodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
+ (id)bodyDataForMessage:(id)arg1;
+ (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
+ (id)fullBodyDataForMessage:(id)arg1;
+ (id)dataForMimePart:(id)arg1;
+ (BOOL)isMessageContentsLocallyAvailable:(id)arg1;
+ (id)_messageDataAtPath:(id)arg1;
+ (id)fullMessageDataForMessage:(id)arg1;
+ (BOOL)hasCacheFileForMessage:(id)arg1 directoryContents:(id)arg2;
+ (BOOL)hasCacheFileForMessage:(id)arg1 part:(id)arg2 directoryContents:(id)arg3;
+ (void)markMessageAsViewed:(id)arg1;
+ (id)queryForCriterion:(id)arg1 options:(unsigned long long)arg2 baseTable:(unsigned long long)arg3 isSubquery:(BOOL)arg4;
+ (id)queryForCriterion:(id)arg1 options:(unsigned long long)arg2 baseTable:(unsigned long long)arg3;
+ (id)queryForCriterion:(id)arg1 options:(unsigned long long)arg2;
+ (void)shouldCancelMDQuery:(struct __MDQuery *)arg1;
+ (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3;
+ (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2;
+ (id)_queryForCountCriterion:(id)arg1;
+ (unsigned long long)countForCriterion:(id)arg1 monitor:(id)arg2;
+ (unsigned long long)countForCriterion:(id)arg1;
+ (BOOL)boolForCriterion:(id)arg1;
+ (id)criterionExpressionStringForStartLibraryID:(long long)arg1 count:(unsigned long long)arg2;
+ (id)filterContiguousMessages:(id)arg1 forCriterion:(id)arg2 options:(unsigned int)arg3;
+ (BOOL)rebuildMailbox:(id)arg1;
+ (BOOL)importMailbox:(id)arg1;
+ (void)setLibraryIsImporting:(BOOL)arg1;
+ (BOOL)libraryIsImporting;
+ (BOOL)importEverythingIncludingDisabledAccounts:(BOOL)arg1;
+ (void)_upgradeMessageDirectoriesSynchronously;
+ (void)upgradeMessageDirectoriesIfNeeded;
+ (void)takeAccountsOnlineAllAccounts:(BOOL)arg1;
+ (BOOL)fileExists;
+ (void)dispose;
+ (int)_libraryStatusCanWrite:(BOOL)arg1;
+ (int)libraryStatus;
+ (BOOL)libraryStatusIsAvailable;
+ (BOOL)isInitialized;
+ (void)setInitialized;
+ (void)setCurrentMailbox:(id)arg1;
+ (id)currentMailbox;
+ (void)incrementRunningIndexOfCurrentMessage;
+ (unsigned long long)runningIndexOfCurrentMessage;
+ (void)setTotalNumberOfMessages:(unsigned long long)arg1;
+ (unsigned long long)totalNumberOfMessages;
+ (void)cleanOldDatabases;
+ (void)prepareToReImportMessages;
+ (id)calendarEventForMessageID:(long long)arg1;
+ (BOOL)addCalendarEvent:(id)arg1 toMessage:(id)arg2;
+ (BOOL)updateCalendarEvent:(id)arg1 forMessage:(id)arg2;
+ (BOOL)deleteEventForMessage:(id)arg1;
+ (id)todosForMessage:(id)arg1;
+ (id)messageForToDo:(id)arg1;
+ (void)todosDidChangeForMessages:(id)arg1 oldToDosByMessage:(id)arg2 newToDosByMessage:(id)arg3;
+ (BOOL)addToDo:(id)arg1;
+ (int)insertToDoAlarms:(id)arg1 withToDoID:(long long)arg2 usingDB:(struct sqlite3 *)arg3;
+ (int)insertNotesInToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (id)todoWithLibraryID:(long long)arg1;
+ (id)todoWithLibraryID:(long long)arg1 options:(unsigned long long)arg2;
+ (id)todoWithID:(id)arg1;
+ (id)todoWithID:(id)arg1 remoteID:(id)arg2;
+ (id)todoWithID:(id)arg1 remoteID:(id)arg2 mailboxID:(long long)arg3;
+ (id)libraryToDoWithRemoteID:(id)arg1 inMailbox:(long long)arg2;
+ (id)lastToDoWithID:(id)arg1 inMailbox:(id)arg2;
+ (id)alarmsForToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (BOOL)updateToDo:(id)arg1;
+ (int)setAlarmsForToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (int)updateNotesInToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (BOOL)deleteToDo:(id)arg1;
+ (int)deleteNotesInToDo:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (int)addToDoToDeletedLog:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (int)removeToDoFromDeletedLog:(id)arg1 usingDB:(struct sqlite3 *)arg2;
+ (BOOL)addToDos:(id)arg1;
+ (BOOL)deleteToDos:(id)arg1;
+ (BOOL)updateToDos:(id)arg1;
+ (id)allToDos;
+ (id)allToDosInMailboxes:(id)arg1;
+ (id)allToDosWithoutMailboxes;
+ (id)todoIDsMatchingCriterion:(id)arg1;
+ (id)listOfToDoIDsInCalendarWithID:(id)arg1;
+ (id)allToDosForMailboxID:(long long)arg1;
+ (id)allToDosForDocumentID:(id)arg1;
+ (BOOL)updateToDo:(id)arg1 toRemoteID:(id)arg2;
+ (id)searchDataForAllToDosInMailboxID:(long long)arg1;
+ (long long)mailboxIDForMailboxUid:(id)arg1 loadIfNotPresent:(BOOL)arg2;
+ (id)mailboxUidForMailboxID:(long long)arg1 forceCreation:(BOOL)arg2;
+ (id)_mailboxUidForMailboxID:(long long)arg1 forceCreation:(BOOL)arg2;
+ (long long)mailboxIDForMailboxUid:(id)arg1;
+ (long long)cachedMailboxIDForMailboxUid:(id)arg1;
+ (void)_setMailboxIDForMailboxUid:(id)arg1 to:(id)arg2;
+ (void)setMailboxIDForMailboxUid:(id)arg1 to:(id)arg2;
+ (long long)toDoMailboxIdForMailAccountURLString:(id)arg1;
+ (long long)toDoMailboxIdForMailAccount:(id)arg1;
+ (long long)toDoMailboxIDForIncompleteMailAccount:(id)arg1;
+ (id)allToDoIDsAndRemoteIDsForMailboxID:(long long)arg1;
+ (BOOL)addCalendars:(id)arg1;
+ (BOOL)updateCalendars:(id)arg1;
+ (BOOL)deleteCalendars:(id)arg1;
+ (id)allToDoCalendars;
+ (BOOL)hasToDoWithIDBeenDeleted:(id)arg1;
+ (id)deletedToDoIDsForDocumentID:(id)arg1;
+ (id)getDetailsForToDosWithRemoteIDInRange:(struct _NSRange)arg1 fromMailbox:(id)arg2;
+ (id)sqlSanitizeNSString:(id)arg1;
+ (void)executeBlock:(id)arg1 isWriter:(void)arg2 useTransaction:(BOOL)arg3 isPrivileged:(BOOL)arg4;
+ (void)executeWriteBlockInDatabase:(id)arg1;
+ (void)executeReadBlockInDatabase:(id)arg1;
+ (id)_checkOutDBHandleForWriting:(BOOL)arg1 isPrivileged:(BOOL)arg2;
+ (void)_checkInDBHandle:(id)arg1 forWriting:(BOOL)arg2;
+ (void)flushCachedDatabases;
+ (id)createUnsignedForQuery:(id)arg1 db:(struct sqlite3 *)arg2;
+ (void)didCommit:(struct sqlite3 *)arg1;

@end

